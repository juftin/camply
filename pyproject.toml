[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [{name = "Justin Flannery", email = "justin.flannery@juftin.com"}]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Development Status :: 5 - Production/Stable",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11"
]
dependencies = [
  "click~=8.1.3",
  "fake-useragent~=1.1.3",
  "pandas~=1.5.3",
  "pydantic~=1.10.7",
  "python-dotenv~=1.0.0",
  "pytz~=2023.2",
  "pyyaml~=6.0",
  "ratelimit~=2.2.1",
  "requests~=2.31.0",
  "rich~=13.3.2",
  "rich-click~=1.6.1",
  "tenacity~=8.2.2"
]
description = "camply, the campsite finder 🏕"
dynamic = ["version"]
keywords = ["recdotgov", "outdoors", "camping", "reservations", "national-parks"]
license = "MIT"
name = "camply"
readme = "README.md"
requires-python = ">=3.8,<4"

[project.optional-dependencies]
all = [
  "apprise~=1.3.0",
  "twilio~=7.17.0",
  "trogon~=0.4.0"
]
apprise = [
  "apprise~=1.3.0"
]
tui = [
  "trogon~=0.4.0"
]
twilio = [
  "twilio~=7.17.0"
]

[project.scripts]
camply = "camply.cli:cli"

[project.urls]
Changelog = "https://github.com/juftin/camply/releases"
Discussions = "https://github.com/juftin/camply/discussions"
Docker = "https://hub.docker.com/r/juftin/camply"
Documentation = "https://github.com/juftin/camply#readme"
Issues = "https://github.com/juftin/camply/issues"
Source = "https://github.com/juftin/camply"

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.coverage.run]
branch = true
omit = ["camply/_version.py"]
parallel = true

[tool.hatch.envs.default]
dependencies = [
  "pytest~=7.3.1",
  "pytest-cov~=4.0.0",
  "pytest-mock~=3.10.0",
  "pytest-vcr~=1.0.2",
  "pytest-xdist~=3.2.1",
  "freezegun~=1.2.1",
  "mkdocs~=1.4.2",
  "mkdocs-material~=9.1.6",
  "mkdocs-click~=0.8.0",
  "mkdocs-gen-files~=0.4.0",
  "mkdocs-literate-nav~=0.6.0",
  "mkdocs-section-index~=0.3.5",
  "mkdocstrings[python]~=0.21.2",
  "black~=23.3.0",
  "ruff~=0.0.261",
  "mypy~=1.2.0",
  "pandas-stubs~=2.0.0.230412",
  "pip-tools~=6.13.0"
]
features = ["all"]
pre-install-commands = ["pip install -U --no-deps -r requirements/requirements-dev.txt"]
python = "3.9"

[tool.hatch.envs.default.env-vars]
PUSHOVER_PUSH_TOKEN = "{env:PUSHOVER_PUSH_TOKEN:placeholder}"
PUSHOVER_PUSH_USER = "{env:PUSHOVER_PUSH_USER:placeholder}"

[tool.hatch.envs.default.scripts]
_pip_compile = "pip-compile --resolver=backtracking --generate-hashes --all-extras {args:}"
_sed_requirements = "sed -i.bak 's/-r requirements.in/camply (pyproject.toml)/' {args}"
all = ["format", "lint", "test"]
check = [
  "mypy --install-types --strict-optional --non-interactive {args:camply/ tests/}"
]
docs-build = "python -m mkdocs build --clean --strict"
docs-deploy = "python -m mkdocs gh-deploy {args:}"
docs-serve = "python -m mkdocs serve --dev-addr localhost:8000"
format = ["ruff --fix {args:.}", "black {args:.}"]
lint = ["ruff {args:.}", "black --check {args:.}"]
requirements = [
  "hatch dep show requirements --project-only --all > requirements.in",
  "_pip_compile --output-file requirements/requirements-prod.txt",
  "_sed_requirements requirements/requirements-prod.txt",
  "hatch dep show requirements --all > requirements.in",
  "_pip_compile --output-file requirements/requirements-dev.txt",
  "_sed_requirements requirements/requirements-dev.txt",
  "rm requirements.in"
]
requirements-upgrade = [
  "hatch dep show requirements --project-only --all > requirements.in",
  "_pip_compile --output-file requirements/requirements-prod.txt --upgrade",
  "_sed_requirements requirements/requirements-prod.txt",
  "hatch dep show requirements --all > requirements.in",
  "_pip_compile --output-file requirements/requirements-dev.txt --upgrade",
  "_sed_requirements requirements/requirements-dev.txt",
  "rm requirements.in"
]
semantic-release = [
  "npm install --prefix .github/semantic_release/",
  "npx --prefix .github/semantic_release/ semantic-release {args:}"
]
test = "pytest -n auto --cov=camply --cov-report={env:COVERAGE_REPORT:term-missing} --cov-config=pyproject.toml {args:tests/ -v}"

[[tool.hatch.envs.test.matrix]]
python = ["3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.test.scripts]
matrix = "test"

[tool.hatch.version]
path = "camply/_version.py"

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
no_implicit_reexport = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
filterwarnings = [
  "error",
  "ignore::DeprecationWarning:pkg_resources",
  "ignore:The --rsyncdir command line argument and rsyncdirs config variable are deprecated.:DeprecationWarning"
]

[tool.ruff]
ignore = [
  "E501",  # line too long, handled by black
  "PLR0913",  # Too many arguments to function call
  "PLW2901"  # Outer for loop variable overwritten by inner assignment target
]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "C",  # flake8-comprehensions
  "Q",  # flake8-quotes
  "B",  # flake8-bugbear
  "PLE",  # pylint
  "PLR",  # pylint
  "PLW",  # pylint
  "RUF",  # ruff
  "C90"  # mccabe
]

[tool.ruff.per-file-ignores]
"tests/**" = [
  "PLR2004"  # Magic value used in comparison
]
